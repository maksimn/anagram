==== 26 сентября 2016 ==========================================================

Нужен класс, который будет считывать слова из файла последовательно, и в конце
чтения возвращает null.

class WordReader {
    public String NextWord();
}

Настоящая реализация этого файла работает с файловой системой, поэтому для
тестируемости нужно выделить интерфейс

interface IWordReader {
    String NextWord();
}

Для начала также сделать рукописную заглушку (Stub) для IWordReader, потом
сделай через Moq.

--------------------------------------------------------------------------------

Класс: AnagramClasses 
Назначение: хранение структуры данных со всеми группами анаграмм.
Структура данных - словарь, в котором ключ - строка, идентифицирующая группу
анаграмм, а значение - список строк - слова из данной группы анаграмм.

--------------------------------------------------------------------------------

Класс: AnagramIO
Назначение: инициализация AnagramClasses из потоков ввода и вывод в потоки 
вывода.

--------------------------------------------------------------------------------

==== 27 сентября 2016 ==========================================================

Текущая задача - избавиться от классов-фейков и перейти на Moq. [сделано]

--------------------------------------------------------------------------------

Сделать ввод-вывод из и в стандартный и файловый потоки [сделано]

--------------------------------------------------------------------------------

==== 28 сентября 2016 ==========================================================

Простая версия программы (в одном потоке без органичений по памяти и с ограни-
чением по размеру входного файла) сделана.

Далее стоит задача сделать многопоточную, не потребляющую больше 1 ГБ памяти и 
способную работать с очень большими файлами программу.

--------------------------------------------------------------------------------

Текущая задача - установить, при каких размерах входных данных программа 
перестает работать. 

Добавить код, профилирующий время работы главной части программы.

==== 1 октября 2016 ============================================================

Соответственно, сейчас есть 2 разных направления улучшения работы программы:

1) Программа должна уметь работать с файлами, в которых >= 400 МБ уникальных 
слов, не потребляя при этом больше 1 ГБ памяти.

2) Программа должна быть ускорена за счёт многопоточности.

Пока следует работать над п. 1).

--------------------------------------------------------------------------------
Как улучшить работу с памятью?

Пусть 

In64 MAX_MEMORY_USAGE_SIZE = 100 * 1024 * 1024; 

- максимальный объем памяти, используемой приложением (здесь - 100 МБ). Если 
потребление памяти достигает этой величины, то результат сериализуется в проме-
жуточный файл, куча освобождается, и программа обрабатывает данные дальше с 
достигнутого места во входном файле. И т.д. до конца обработки входного файла.

После этого мы будем иметь N файлов с промежуточными результатами. Нужно слить 
все эти файлы в один заданный результирующий файл.

--------------------------------------------------------------------------------

Текущая задача - реализовать сериализацию полученных промежуточных групп 
анаграмм в файл.

Исходно мы имеем объект класса AnagramMaker, в котором есть структура данных с
результатами. 

Создадим класс AnagramSerializer, который будет решать эту задачу.

class AnagramSerializer {
    public void SerializeToFile(AnagramMaker, String file)
}
